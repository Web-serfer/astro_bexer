import { betterAuth, type BetterAuthOptions } from "better-auth";
import { prismaAdapter } from "better-auth/adapters/prisma";
import { PrismaClient } from "@prisma/client";
import { sendEmail } from "../../lib/sendEmail";
import { openAPI, emailOTP } from "better-auth/plugins";
import {
  getVerificationEmailTemplate,
  verificationEmailSubject,
  // –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ —Å—Å—ã–ª–∫–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
  getPasswordResetLinkTemplate,
  passwordResetLinkSubject,
} from "../../lib/email";

const prisma = new PrismaClient();

const requiredEnvVars = [
  "BETTER_AUTH_SECRET",
  "BETTER_AUTH_URL",
  "GOOGLE_CLIENT_ID",
  "GOOGLE_CLIENT_SECRET",
  "VK_CLIENT_ID",
  "VK_CLIENT_SECRET",
  "EMAIL_VERIFICATION_CALLBACK_URL",
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è .env: ${envVar}`);
  }
}

export const auth = betterAuth({
  secret: process.env.BETTER_AUTH_SECRET,

  database: prismaAdapter(prisma, {
    provider: "postgresql",
  }),

  databaseHooks: {
    user: {
      create: {
        before: async (user, context) => {
          // --- –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ì–û –ë–õ–û–ö–ê ---
          console.log("üîç [HOOK `user.create.before`] –ó–ê–ü–£–©–ï–ù");

          // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ context —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
          if (!context) {
            console.log("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –•—É–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.");
            return;
          }

          const provider = context.provider;
          const profile = context.profile as any;

          console.log(`PROVIDER: [${provider}]`);
          console.log("PROFILE OBJECT:", JSON.stringify(profile, null, 2));

          let image = user.image;

          if (provider === "google" && profile.picture) {
            console.log(
              "‚úÖ –£—Å–ª–æ–≤–∏–µ –¥–ª—è Google —Å—Ä–∞–±–æ—Ç–∞–ª–æ. –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä.",
            );
            image = profile.picture;
          } else if (provider === "vk" && profile.photo_200_orig) {
            console.log(
              "‚úÖ –£—Å–ª–æ–≤–∏–µ –¥–ª—è VK —Å—Ä–∞–±–æ—Ç–∞–ª–æ. –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä.",
            );
            image = profile.photo_200_orig;
          } else {
            console.log("‚ùå –ù–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ.");
          }

          console.log(`‚û°Ô∏è –ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 'image': ${image}`);
          console.log("üîç [HOOK `user.create.before`] –ó–ê–í–ï–†–®–ï–ù");
          // --- –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ì–û –ë–õ–û–ö–ê ---

          return {
            data: {
              ...user, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              image: image, // –ù–∞—à–∞ –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä
            },
          };
        },
      },
    },
  },

  emailAndPassword: {
    enabled: true,
    requireEmailVerification: true,

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ ---
    sendResetPassword: async ({ user, url }) => {
      await sendEmail({
        to: user.email,
        subject: passwordResetLinkSubject,
        text: `–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${url}`,
        html: getPasswordResetLinkTemplate(url),
      });
    },
  },

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
  emailVerification: {
    sendOnSignUp: true,
    autoSignInAfterVerification: false,
    sendVerificationEmail: async ({ user, token }) => {
      const verificationUrl = `${process.env.BETTER_AUTH_URL}/email-verified?token=${token}`;
      await sendEmail({
        to: user.email,
        subject: verificationEmailSubject,
        text: `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${verificationUrl}`,
        html: getVerificationEmailTemplate(verificationUrl),
      });
    },
  },

  plugins: [
    openAPI(),
    emailOTP({
      otpLength: 6,
      expiresIn: 300, // 5 –º–∏–Ω—É—Ç
      allowedAttempts: 3,
      async sendVerificationOTP({ email, otp, type }) {
        let subject: string;
        let htmlContent: string;
        let textContent: string;

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–Ω—ã—Ö –ø–∏—Å–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ OTP
        switch (type) {
          case "sign-in":
            subject = `–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: ${otp}`;
            htmlContent = `<p>–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: <strong>${otp}</strong></p><p>–û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.</p>`;
            textContent = `–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: ${otp}. –û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.`;
            break;

          case "email-verification":
            subject = `–í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email: ${otp}`;
            htmlContent = `<p>–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email: <strong>${otp}</strong></p><p>–û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.</p>`;
            textContent = `–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email: ${otp}. –û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.`;
            break;

          default:
            subject = `–í–∞—à OTP: ${otp}`;
            htmlContent = `<p>–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥: <strong>${otp}</strong></p><p>–û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.</p>`;
            textContent = `–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥: ${otp}. –û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.`;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é sendEmail
        await sendEmail({
          to: email,
          subject,
          text: textContent,
          html: htmlContent,
        });
      },
    }),
  ],

  socialProviders: {
    google: {
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
    },
    // github: {
    //   clientId: process.env.GITHUB_CLIENT_ID as string,
    //   clientSecret: process.env.GITHUB_CLIENT_SECRET as string,
    // },
    vk: {
      clientId: process.env.VK_CLIENT_ID as string,
      clientSecret: process.env.VK_CLIENT_SECRET as string,
    },
  },

  session: {
    expiresIn: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π
    updateAge: 24 * 60 * 60, // 1 –¥–µ–Ω—å
  },
} satisfies BetterAuthOptions);
